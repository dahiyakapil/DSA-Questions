// #include<bits/stdc++.h>
// using namespace std;

// class Node
// {
// public:
//     int data;
//     Node *next;
//     Node *back;

//     Node(int data1, Node *next1, Node *back1)
//     {
//         data = data1;
//         next = next1;
//         back = back1;
//     }

//     Node(int data1)
//     {
//         data = data1;
//         next = nullptr;
//         back = nullptr;
//     }
// };

// void print(Node *head)
// {
//     while (head != NULL)
//     {
//         cout << head->data << " ";
//         head = head->next;
//     }
// }

// Node *convertingArrToDLL(vector<int> &arr)
// {
//     Node *head = new Node(arr[0]);
//     Node *prev = head;

//     for (int i = 1; i < arr.size(); i++)
//     {
//         Node *temp = new Node(arr[i], nullptr, prev);
//         prev->next = temp;
//         prev = temp;
//     }
//     return head;
// }

// /*
// Algorithm: deleteHeadDLL

// Input:
//   - head: Pointer to the current head of the doubly linked list.

// Output:
//   - Returns a pointer to the updated head of the doubly linked list.

// Steps:
// 1. // Check if the list is empty or has only one node
//    - If head is NULL or head->next is NULL:
//      - Return NULL as there is nothing to delete.

// 2. // Delete the head node (head->next != NULL)
//    - Create a pointer 'prev' and set it to the current head.
//    - Update the head to the next node.
//    - Set the backward pointer of the new head to NULL.
//    - Set the next pointer of the previous head to NULL.
//    - Delete the previous head node using the delete operator.
//    - Return the updated head pointer.
// */

// Node* deleteHeadDLL(Node* head)
// {
//     if(head == NULL || head->next == NULL)
//     {
//         return NULL;
//     }

//     Node* prev = head;
//     head = head ->next;

//     head->back = nullptr;
//     prev->next = nullptr;

//     delete prev;
//     return head;
// }

// int main()
// {

//     vector<int> arr = {3, 45, 11, 20};
//     Node *head = convertingArrToDLL(arr);
//     print(head);
//     return 0;
// }